layer [
  name: "{fc6}"
  type: "InnerProduct"
  bottom: "roi_pool"
  top: "{fc6}"
  param [
    lr_mult: 1
    decay_mult: 1
  ]
  param [
    lr_mult: 2
    decay_mult: 0
  ]
  inner_product_param [
    num_output: 128
    weight_filler [
      type: "gaussian"
      std: 0.01
    ]
    bias_filler [
      type: "constant"
      value: 0
    ]
  ]
]
layer [
  name: "{fc6}/relu"
  type: "ReLU"
  bottom: "{fc6}"
  top: "{fc6}"
]


layer [
  name: "{fc7}"
  type: "InnerProduct"
  bottom: "{fc6}"
  top: "{fc7}"
  param [
    lr_mult: 1.0
    decay_mult: 1.0
  ]
  param [
    lr_mult: 2.0
    decay_mult: 0.0
  ]
  inner_product_param [
    num_output: 128
    weight_filler [
      type: "xavier"
    ]
    bias_filler [
      type: "constant"
      value: 0.1
    ]
  ]
]

layer [
  name: "{fc7}/relu"
  type: "ReLU"
  bottom: "{fc7}"
  top: "{fc7}"
]

layer [
  name: "{cls_score}"
  type: "InnerProduct"
  bottom: "{fc7}"
  top: "{cls_score}"
  param [ lr_mult: 1.0 ]
  param [ lr_mult: 2.0 ]
  inner_product_param [
    num_output: 21
    weight_filler [ type: "gaussian" std: 0.01 ]
    bias_filler [ type: "constant" value: 0 ]
  ]
]

layer [
  name: "bbox_pred" #keep same weights
  type: "InnerProduct"
  bottom: "{fc7}"
  top: "{bbox_pred}"
  param [
    lr_mult: 1
    decay_mult: 1
  ]
  param [
    lr_mult: 2
    decay_mult: 0
  ]
  inner_product_param [
    num_output: 84
    weight_filler [
      type: "msra"
      std: 0.01
    ]
    bias_filler [
      type: "constant"
      value: 0
    ]
  ]
]
layer [
  name: "loss_{cls_score}"
  type: "SoftmaxWithLoss"
  bottom: "{cls_score}"
  bottom: "{label}"
  propagate_down: 1
  propagate_down: 0
  top: "loss_{cls_score}"
  loss_weight: 1
]
layer [
  name: "loss_{bbox_pred}"
  type: "SmoothL1Loss"
  bottom: "{bbox_pred}"
  bottom: "bbox_targets"
  bottom: "bbox_inside_weights"
  bottom: "bbox_outside_weights"
  top: "loss_{bbox_pred}"
  loss_weight: 1
]
